// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[6..8], a=ram64a, b=ram64b, c=ram64c, d=ram64d, e=ram64e, f=ram64f, g=ram64g, h=ram64h);
    
    RAM64(in=in, load=ram64a, address=address[0..5], out=oram64a);
    RAM64(in=in, load=ram64b, address=address[0..5], out=oram64b);
    RAM64(in=in, load=ram64c, address=address[0..5], out=oram64c);
    RAM64(in=in, load=ram64d, address=address[0..5], out=oram64d);
    RAM64(in=in, load=ram64e, address=address[0..5], out=oram64e);
    RAM64(in=in, load=ram64f, address=address[0..5], out=oram64f);
    RAM64(in=in, load=ram64g, address=address[0..5], out=oram64g);
    RAM64(in=in, load=ram64h, address=address[0..5], out=oram64h);

    Mux8Way16(a=oram64a, b=oram64b, c=oram64c, d=oram64d, e=oram64e, f=oram64f, g=oram64g, h=oram64h, sel=address[6..8], out=out);
}