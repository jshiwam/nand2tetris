// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in=load, sel=address[14], a=memo, b=outs);
    
    //Memory
    RAM16K(in=in, load=memo, address=address[0..13], out=memout);
    
    //Screen And Keyboard
    DMux(in=outs, sel=address[13], a=sck, b=invalid);

    //Keyboard when address == 110000000000000
    And(a=address[14], b=address[13], out=k1);
    Or(a=address[12], b=address[11], out=k2);
    Or(a=address[10], b=address[9], out=k3);
    Or(a=address[8], b=address[7], out=k4);
    Or(a=address[6], b=address[5], out=k5);
    Or(a=address[4], b=address[3], out=k6);
    Or(a=address[2], b=address[1], out=k7);
    
    Or(a=address[0], b=k7, out=ke1);
    Or(a=k6, b=k5, out=ke2);
    Or(a=k4, b=k3, out=ke3);
    
    Or(a=k2, b=ke1, out=key1);
    Or(a=ke2, b=ke3, out=key2);

    Or(a=key1, b=key2, out=key);
    Not(in=key, out=iskey);

    And(a=k1, b=iskey, out=keyin);

    Not(in=keyin, out=nkeyin);
    Keyboard(out=Kout);
    
    Screen(in=in, load=sck, address=address[0..12], out=sckout);
    
    Mux16(a=sckout, b=Kout, sel=keyin, out=screenkey);

    And(a=nkeyin, b=address[13], out=outinval);

    //If invalid memory accessed then set the output to false
    Mux16(a=screenkey, b=false, sel=outinval, out=outsval);
    
    Mux16(a=memout, b=outsval, sel=address[14], out=out);
}